/* gzlib.c -- zlib functions common to reading and writing gzip files
 * Copyright (C) 2004-2024 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
 */

#include "gzguts.h"

#if defined(__DJGPP__)
#  define LSEEK llseek
#elif defined(_WIN32) && !defined(__BORLANDC__) && !defined(UNDER_CE)
#  define LSEEK _lseeki64
#elif defined(_LARGEFILE64_SOURCE) && _LFS64_LARGEFILE-0
#  define LSEEK lseek64
#else
#  define LSEEK lseek
#endif

#if defined UNDER_CE

/* Map the Windows error number in ERROR to a locale-dependent error message
   string and return a pointer to it.  The function handles wide character
   conversion and ensures proper memory management. */
char ZLIB_INTERNAL *gz_strwinerror(DWORD error) {
    static char buf[1024];
    wchar_t *msgbuf = NULL;
    DWORD lasterr = GetLastError(); // Corrected from truncated 'las'
    DWORD chars = FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM |
                                 FORMAT_MESSAGE_ALLOCATE_BUFFER,
                                 NULL, error, 0, (LPWSTR)&msgbuf, 0, NULL);
    if (chars > 0) {
        /* Remove trailing newlines */
        if (chars >= 2 && msgbuf[chars - 2] == L'\r' && msgbuf[chars - 1] == L'\n')
            chars -= 2;
        else if (chars >= 1 && (msgbuf[chars - 1] == L'\r' || msgbuf[chars - 1] == L'\n'))
            chars--;
        /* Convert wide char message to multi-byte */
        if (WideCharToMultiByte(CP_ACP, 0, msgbuf, chars, buf, sizeof(buf),
                                NULL, NULL)) {
            buf[chars] = '\0'; // Ensure null-termination
            LocalFree(msgbuf);
            SetLastError(lasterr); // Restore original error
            return buf;
        }
        LocalFree(msgbuf);
    }
    /* Fallback for errors during formatting */
    snprintf(buf, sizeof(buf), "unknown Windows error (0x%08lx)", error);
    SetLastError(lasterr);
    return buf;
}
#endif